device= "eps",
family = "Times")
plotDebt <-ggplot(data=queryDebt, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -0.5, colour = "black")
plotDebt
ggsave(file = paste0(filePath, "wykresy/", "debtToGDPUE.eps"),
plot = plotDebt,
device= "eps",
family = "Times")
require("eurostat")
require("ggplot2")
require("dplyr")
require("extrafont")
help(p = "eurostat")
# Czcionki instalacja:
#library(remotes)
#remotes::install_version("Rttf2pt1", version = "1.3.8")
#extrafont::font_import()
loadfonts(device = "postscript", quiet = FALSE)
loadfonts(device = "win", quiet = FALSE)
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
#eu_countries
dictCountries <- eu_countries
countries <- c("CZ", "HU", "PL", "SK", "RO",
"DE", "FR" , "IT", "ES", "NL", "BE", "AT",
"NO", "FI", "SE")
queryDeficit <- get_eurostat("gov_10dd_edpt1",
filters = list(geo = countries,
sector = "S13",
na_item = "GD",
unit = "PC_GDP",
lastTimePeriod  = 1))
queryDeficit <- queryDeficit  %>%
mutate(isPoland = ifelse(geo =="PL", "1", "0"))
plotDeficit <-ggplot(data=queryDebt, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -0.5, colour = "black")
plotDeficit
ggsave(file = paste0(filePath, "wykresy/", "debtToGDPUE.eps"),
plot = plotDeficit,
device= "eps",
family = "Times")
plotDeficit <-ggplot(data=queryDeficit, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -0.5, colour = "black")
plotDeficit
# Wykres: Deficit (%PKB)
queryDeficit <- get_eurostat("gov_10dd_edpt1",
filters = list(geo = countries,
sector = "S13",
na_item = "B9",
unit = "PC_GDP",
time  = "2019"))
queryDeficit <- queryDeficit  %>%
mutate(isPoland = ifelse(geo =="PL", "1", "0"))
plotDeficit <-ggplot(data=queryDeficit, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Deficyt w 2019 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -0.5, colour = "black")
plotDeficit
queryDeficit <- get_eurostat("gov_10dd_edpt1",
filters = list(geo = countries,
sector = "S13",
na_item = "B9",
unit = "PC_GDP",
time  = "2019"))
queryDeficit <- queryDeficit  %>%
mutate(isPoland = ifelse(geo =="PL", "1", "0"))
plotDeficit <-ggplot(data=queryDeficit, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Deficyt w 2019 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -0.5, colour = "black")
plotDeficit
ggsave(file = paste0(filePath, "wykresy/", "deficitToGDPUE.eps"),
plot = plotDeficit,
device= "eps",
family = "Times")
COFOG_main <- c("GF01", "GF02", "GF03", "GF04", "GF05", "GF06",
"GF07", "GF08", "GF09", "GF10")
COFOG_PL <- c("Uslugi ogólne", "Obrona narodowa", "Bezpieczenstwo publiczne",
"Gospodarka", "Ochrona srodowiska", "Polityka mieszkaniowa",
"Zdrowie", "Sport i kultura", "Edukacja", "Wydatki socjalne")
queryPLExp <- get_eurostat("gov_10a_exp",
filters = list(geo = "PL",
cofog99 = COFOG_main,
sector = "S13",
na_item = "TE",
unit = "PC_TOT",
time  = "2019"))
queryPLExp$cofog99 <- COFOG_PL
# Wykres slupkowy:
plotPLExp <-ggplot(data=queryPLExp, aes(x= reorder(cofog99, -values),
y=values)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, family = "Arial Black",  face="bold"),
axis.text.x = element_text(angle = 45, hjust=1)) +
labs(x="", y="", title = "Struktura wydatków z 2019 roku (%)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = values), vjust = 1, colour = "white")
plotPLExp
ggsave(file = paste0(filePath, "wykresy/", "PL_COFOG.eps"),
plot = plotPLExp,
device= "eps",
family = "Times")
COFOG_main <- c("GF01", "GF02", "GF03", "GF04", "GF05", "GF06",
"GF07", "GF08", "GF09", "GF10")
COFOG_PL <- c("Uslugi ogólne", "Obrona narodowa", "Bezpieczenstwo publiczne",
"Gospodarka", "Ochrona srodowiska", "Polityka mieszkaniowa",
"Zdrowie", "Sport i kultura", "Edukacja", "Wydatki społeczne")
queryPLExp <- get_eurostat("gov_10a_exp",
filters = list(geo = "PL",
cofog99 = COFOG_main,
sector = "S13",
na_item = "TE",
unit = "PC_TOT",
time  = "2019"))
queryPLExp$cofog99 <- COFOG_PL
# Wykres slupkowy:
plotPLExp <-ggplot(data=queryPLExp, aes(x= reorder(cofog99, -values),
y=values)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, family = "Arial Black",  face="bold"),
axis.text.x = element_text(angle = 45, hjust=1)) +
labs(x="", y="", title = "Struktura wydatków z 2019 roku (%)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = values), vjust = 1, colour = "white")
plotPLExp
ggsave(file = paste0(filePath, "wykresy/", "PL_COFOG.eps"),
plot = plotPLExp,
device= "eps",
family = "Times")
plotPLExp <-ggplot(data=queryPLExp, aes(x= reorder(cofog99, -values),
y=values)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold"),
axis.text.x = element_text(angle = 45, hjust=1)) +
labs(x="", y="", title = "Struktura wydatków z 2019 roku (%)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = values), vjust = 1, colour = "white")
plotPLExp
ggsave(file = paste0(filePath, "wykresy/", "PL_COFOG.eps"),
plot = plotPLExp,
device= "eps",
family = "Times")
require("eurostat")
require("ggplot2")
require("dplyr")
require("extrafont")
help(p = "eurostat")
loadfonts(device = "postscript", quiet = FALSE)
loadfonts(device = "win", quiet = FALSE)
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
dictCountries <- eu_countries
countries <- c("CZ", "HU", "PL", "SK", "RO",
"DE", "FR" , "IT", "ES", "NL", "BE", "AT",
"NO", "FI", "SE")
# Wykres: Wydatki - budzet centralny (%PKB)
queryGovCen <- get_eurostat("gov_10a_main",
filters = list(geo = countries,
sector = "S1311",
na_item = "TE",
unit = "PC_GDP",
lastTimePeriod  = 1))
queryGovCen <- queryGovCen  %>%
mutate(isPoland = ifelse(geo =="PL", "1", "0"))
plotCentralGov <-ggplot(data=queryGovCen, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="", title = "Wydatki budzetu centralnego w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = values), vjust = -1, colour = "black")
plotCentralGov
ggsave(file = paste0(filePath, "wykresy/", "sizeCentralGov.eps"),
plot = plotCentralGov,
device= "eps",
family = "Times")
ggsave(file = paste0(filePath, "wykresy/", "sizeLocalGov.eps"),
plot = plotLocalGov,
device= "eps",
family = "Times")
queryGovLocal <- get_eurostat("gov_10a_main",
filters = list(geo = countries,
sector = "S1313",
na_item = "TE",
unit = "PC_GDP",
lastTimePeriod  = 1))
queryGovLocal <- queryGovLocal  %>%
mutate(isPoland = ifelse(geo =="PL", "1", "0"))
plotLocalGov <-ggplot(data=queryGovLocal, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face="bold")) +
labs(x="", y="",
title = "Wydatki samorzadów w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -1, colour = "black")
plotLocalGov
ggsave(file = paste0(filePath, "wykresy/", "sizeLocalGov.eps"),
plot = plotLocalGov,
device= "eps",
family = "Times")
queryGov2Step <- get_eurostat("gov_10a_main",
filters = list(geo = c("DE", "FR", "ES"),
sector = c("S1313", "S1312"),
na_item = "TE",
unit = "PC_GDP",
lastTimePeriod  = 1))
View(queryGov2Step)
queryGov2Step <- get_eurostat("gov_10a_main",
filters = list(geo = c("DE", "FR", "ES"),
sector = c("S1311", "S1312"),
na_item = "TE",
unit = "PC_GDP",
lastTimePeriod  = 1))
View(queryGov2Step)
queryGov2Step <- get_eurostat("gov_10a_main",
filters = list(geo = c("DE", "FR", "ES"),
sector = c("S1311", "S1312"),
na_item = "TE",
unit = "PC_GDP",
lastTimePeriod  = 1))
plot2StepGov <-ggplot(data=queryGov2Step, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face="bold")) +
labs(x="", y="",
title = "Wydatki samorzadów w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -1, colour = "black")
plot2StepGov
ggsave(file = paste0(filePath, "wykresy/", "size2StepGov.eps"),
plot = plot2StepGov,
device= "eps",
family = "Times")
View(queryGov2Step)
plot2StepGov <-ggplot(data=queryGov2Step, aes(x= reorder(geo, -values),
y=values,
fill=sector)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face="bold")) +
labs(x="", y="",
title = "Wydatki samorzadów w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -1, colour = "black")
plot2StepGov
ggsave(file = paste0(filePath, "wykresy/", "size2StepGov.eps"),
plot = plot2StepGov,
device= "eps",
family = "Times")
queryGov2Step <- get_eurostat("gov_10a_main",
filters = list(geo = c("DE", "FR", "ES"),
sector = c("S1311", "S1312"),
na_item = "TE",
unit = "PC_GDP",
lastTimePeriod  = 1))
plot2StepGov <-ggplot(data=queryGov2Step, aes(x= reorder(geo, -values),
y=values,
fill=sector)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face="bold")) +
labs(x="", y="",
title = "Wydatki samorzadów w 2020 roku (%PKB)") +
scale_fill_manual(values = c("S1311"="red", "S1312"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -1, colour = "black")
plot2StepGov
dictCountries <- eu_countries
View(dictCountries)
queryDebt <- get_eurostat("gov_10dd_edpt1",
filters = list(geo = eu_countries$code,
sector = "S13",
na_item = "GD",
unit = "PC_GDP",
lastTimePeriod  = 1))
queryDebt <- queryDebt  %>%
mutate(isPoland = ifelse(geo =="PL", "1", "0"))
plotDebt <-ggplot(data=queryDebt, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), vjust = -0.5, colour = "black")
plotDebt
plotDebt <-ggplot(data=queryDebt, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), size=10, vjust = -0.5, colour = "black")
plotDebt
plotDebt <-ggplot(data=queryDebt, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), size=4, vjust = -0.5, colour = "black")
plotDebt
geom_text(aes(label = round(values, digits = 1)), position=position_dodge(width=0.9),
vjust = -0.5, colour = "black")
plotDebt <-ggplot(data=queryDebt, aes(x= reorder(geo, -values),
y=values,
fill=isPoland)) +
geom_bar(stat="identity", position = "dodge") +
theme_classic() + theme(legend.position = "none",
plot.title = element_text(hjust = 0.5,  face="bold")) +
labs(x="", y="",
title = "Dlug publiczny w 2020 roku (%PKB)") +
scale_fill_manual(values = c("1"="red", "0"="gray" ), guide = FALSE) +
geom_text(aes(label = round(values, digits = 1)), position=position_dodge(width=0.9),
vjust = -0.5, colour = "black")
plotDebt
ggsave(file = paste0(filePath, "wykresy/", "debtToGDPUE.eps"),
plot = plotDebt,
device= "eps",
family = "Times",
width = 1439,
height = 650)
ggsave(file = paste0(filePath, "wykresy/", "debtToGDPUE.eps"),
plot = plotDebt,
device= "eps",
family = "Times",
width = 14.98,
height = 6.77)
#--------------------------------------------------------------------
# Analiza danych iloÅciowych z wykorzystaniem R
# zajÄcia 1
#------------------------------------------------------------------
a <- 1
a
b = 1
b
"x" -> b
b
#poczÄtek
stronyNazwy <- c("StronaA", "StronaB", "StronaC", "stronaD" )
stronyLinkiZew <- c(3, 10, 15, 7)
#tworzenie i dodawanie zmiennych do ramki danych:
strony <- data.frame(Nazwa = stronyNazwy, LinkiZ = stronyLinkiZew)
strony
#strony jako lista
stronyL <- list(stronyNazwy, stronyLinkiZew)
stronyL
#jako macierz
stronyM <- cbind(stronyNazwy, stronyLinkiZew)
stronyM
library(tidyverse)
stronyT <- as_tibble(strony)
stronyT
stronyT <- tibble(stronyNazwy, stronyLinkiZew)
stronyT
stronyM
pisa <- read_excel("PISA-2009-pogimnazjalne.xlsx", "data")
codebook <- read_excel("PISA-2009-pogimnazjalne.xlsx", "codebook")
require("dplyr")
require("magrittr")
library(readxl)
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/")
setwd(filePath)
pisa <- read_excel("PISA-2009-pogimnazjalne.xlsx", "data")
codebook <- read_excel("PISA-2009-pogimnazjalne.xlsx", "codebook")
str(pisa)
nrow(pisa)
ncol(pisa)
head(pisa)
head(pisa, n = 10)
tail(pisa)
str(pisa)
colnames(pisa)
y <- head(pisa$scoreKKS)
y
y == 182
y > 190
l <- c(TRUE, FALSE, NA)
!l
# OR - zwraca prawde, gdy jest jeden element ma wartosc prawda (TRUE)
l
l | TRUE
l | FALSE
# AND - zwraca prawde, gdy oba elementy maja wartosc prawda (TRUE)
l
l & TRUE
l & FALSE
l
l == NA
l
x <- 1:5
y <- c(NA, rep("K", 4))
z <- y == "K"
x
y
z
x[z]
z
z %in% TRUE
a <- 4
a %in% x
x[z]
a <- LETTERS[1:10]
a
b <- c("A", "B", "X")
b %in% a
x[z %in% TRUE]
x <- 1:5
y <- c(NA, rep("K", 4))
z <- y %in% "K"
x
y
z
x[z]
x <- 1:5
y <- c(NA, rep("K", 4))
z <- y %in% "K"
z
x <- 4
x <- exp(x)
x <- sin(x)
x
x <-4
x <- x %>%
exp() %>%
sin()
x
x <-4 %>% sin() %>%exp()
x
x <-4
x <- x %>%exp() %>% sin()
x
x <-4 %>%
exp() %>%
sin()
x <-3
x <- x %>% sin()
# Takze to mozna uproscic z paketem magrittr
x <-3
x %<>% sin()
x <-3
x <- x %>% sin()
x
# Takze to mozna uproscic z paketem magrittr
x <-3
x %<>% sin()
x
x <-3
x <- x %>% sin()
# Takze to mozna uproscic z paketem magrittr
y <-3
y %<>% sin()
print(x,y)
pisa %<>% mutate(log_income = log(income),
scoreTMR = scoreTMR - mean(scoreTMR, na.rm = TRUE))
# obejrzyjmy wynik
pisa
