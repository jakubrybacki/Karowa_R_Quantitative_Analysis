library("MASS")
help(p="mfx")
# Dane:
# http://www.europeansocialsurvey.org/
# Biblioteki Tidyverse
library("dplyr")
library("tidyr")
library("magrittr")
# Biblioteka dane
library("foreign")
library("MASS")
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/")
fileName <- "ESS8PL.sav"
dane <- read.spss(paste0(filePath, fileName))
dane_DF <- dane_Media %>% as.data.frame()
dane_DF <- dane %>% as.data.frame()
colnames(dane_DF)
View(dane)
summary(dane_DF$stfhlth)
dane_DF %<>% mutate(ocena_zdrowie = as.numeric(stfhlth))
summary(daneDF$ocena_zdrowie)
summary(dane_DF$ocena_zdrowie)
formula <- stfhlth ~ health + stflife + gndr + yrbrn
polr(formula, data = dane_DF, Hess = TRUE)
summary(dane_DF$stflife)
summary(dane_DF$gndr)
summary(dane_DF$yrbrn)
summary(dane_DF$stfhlth)
summary(dane_DF$stflife)
summary(dane_DF$gndr)
summary(dane_DF$yrbrn)
lapply(c(dane_DF$stfhlth, dane_DF$stflife, dane_DF$gndr, dane_DF$yrbrn),
summary)
daneMpdel <- dane_DF %>% select(stfhlth, stflife, gndr, yrbrn) %>%
mutate(ocena_zdrowie = as.numeric(stfhlth)) %>%
mutate(yrbrn = as.numeric(yrbrn))
formula <- stfhlth ~ health + stflife + gndr + yrbrn
polr(formula, data = dane_DF, Hess = TRUE)
daneModel <- dane_DF %>% select(stfhlth, stflife, gndr, yrbrn) %>%
mutate(ocena_zdrowie = as.numeric(stfhlth)) %>%
mutate(yrbrn = as.numeric(yrbrn))
summary(dane_DF$ocena_zdrowie)
#
formula <- stfhlth ~ health + stflife + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
# Przekształcam
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
mutate(ocena_zdrowie = as.numeric(stfhlth)) %>%
mutate(yrbrn = as.numeric(yrbrn))
summary(dane_DF$ocena_zdrowie)
#
formula <- stfhlth ~ health + stflife + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
daneModel %<>% filter(stfhlth %!in% c("Refusal", "Don't know", "No answer"))
daneModel %<>% filter(stfhlth! %in% c("Refusal", "Don't know", "No answer"))
daneModel %<>% filter(!(stfhlth %in% c("Refusal", "Don't know", "No answer")))
formula <- stfhlth ~ health + stflife + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
View(daneModel)
daneModel %<>% filter(!(stfhlth %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(health %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(stflife %in% c("Refusal", "Don't know", "No answer"))) %>%
1
# Filtrujemy braki danych
daneModel %<>% filter(!(stfhlth %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(health %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(stflife %in% c("Refusal", "Don't know", "No answer")))
formula <- ocena_zdrowie ~ health + stflife + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
# Podsumowanie danych
summary(dane_DF$stfhlth)
summary(dane_DF$stflife)
summary(dane_DF$gndr)
summary(dane_DF$yrbrn)
# Przekształcam
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn)) %>%
# Filtrujemy braki danych
daneModel %<>% filter(!(stfhlth %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(health %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(stflife %in% c("Refusal", "Don't know", "No answer")))
#
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
# Dane:
# http://www.europeansocialsurvey.org/
# Biblioteki Tidyverse
library("dplyr")
library("tidyr")
library("magrittr")
# Biblioteka dane
library("foreign")
library("MASS")
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/")
fileName <- "ESS8PL.sav"
dane <- read.spss(paste0(filePath, fileName))
# Przeksztalcenie duzej listy z SPSS w ramke danych.
dane_DF <- dane %>% as.data.frame()
colnames(dane_DF)
# Dotychczas analizowaliśmy jedynie zmienne binarne (0 albo 1).
# Na tych zajęciach przyjrzymy się pytaniom o różnych skalach porównawczych
# np. od 1 do 10.
# Będziemy rozrózniali 2 typy danych - porządkowe, gdzie kolejne wartości są
# lepszą oceną od poprzednich. Do modelowania takich zmiennych posłuży
# Ordinal logit.
# Chcemy sprawdzić ocenę służby zdrowia (stfhlth), w zależnosci od:
#   oceny stanu własnego zdrowia (health), satysfakcji z życia (stflife),
#   płci (gndr), wieku / roku urodzenia (yrbrn)
# Podsumowanie danych
summary(dane_DF$stfhlth)
summary(dane_DF$stflife)
summary(dane_DF$gndr)
summary(dane_DF$yrbrn)
# Przekształcam
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn)) %>%
# Filtrujemy braki danych
daneModel %<>% filter(!(stfhlth %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(health %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(stflife %in% c("Refusal", "Don't know", "No answer")))
#
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn)) %>%
1
# Przekształcam
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn))
# Filtrujemy braki danych
daneModel %<>% filter(!(stfhlth %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(health %in% c("Refusal", "Don't know", "No answer"))) %>%
filter(!(stflife %in% c("Refusal", "Don't know", "No answer")))
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(stfhlth %in% braki_danych)) %>%
filter(!(health %in% braki_danych)) %>%
filter(!(stflife %in% braki_danych)) %>%
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(stfhlth %in% braki_danych)) %>%
filter(!(health %in% braki_danych)) %>%
filter(!(stflife %in% braki_danych)) %>%
filter(!(gndr %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych))
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
daneModel$stfhlth %<>% droplevels(stfhlth)
daneModel$stfhlth %<>% droplevels()
formula <- stfhlth ~ health + ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
formula <- stfhlth ~ health
polr(formula, data = daneModel, Hess = TRUE)
formula <- stfhlth ~ ocena_zadowolenie + gndr + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
# Przeksztalcenia
daneModel %<>% mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn))
# Wybór zmiennych
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(stfhlth %in% braki_danych)) %>%
filter(!(health %in% braki_danych)) %>%
filter(!(stflife %in% braki_danych)) %>%
filter(!(gndr %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych))
# Przeksztalcenia
daneModel %<>% mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn))
formula <- stfhlth ~ ocena_zadowolenie + yrbrn
polr(formula, data = daneModel, Hess = TRUE)
formula <- stfhlth ~ ocena_zadowolenie + yrbrn + gndr
polr(formula, data = daneModel, Hess = TRUE)
formula <- stfhlth ~ ocena_zadowolenie + yrbrn + gndr
model <- polr(formula, data = daneModel, Hess = TRUE)
summary(model)
formula <- stfhlth ~ ocena_zadowolenie + health + yrbrn + gndr
model <- polr(formula, data = daneModel, Hess = TRUE)
summary(model)
ctable <- coef(summary(model))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
ctable <- cbind(ctable, "p value" = p)
ctable
# Ustawienia formatowania
options(scipen=999)
options(digits=2)
ctable
ctable <- coef(summary(model))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2 %>%
round (digits = 2)
ctable <- cbind(ctable, "p value" = p)
ctable
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
p <- round (p, digits = 2)
ctable <- cbind(ctable, "p value" = p)
ctable
# Dane:
# http://www.europeansocialsurvey.org/
# Biblioteki Tidyverse
library("dplyr")
library("tidyr")
library("magrittr")
# Biblioteka dane
library("foreign")
library("MASS")
# Ustawienia formatowania
options(scipen=999)
options(digits=2)
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/")
fileName <- "ESS8PL.sav"
dane <- read.spss(paste0(filePath, fileName))
# Przeksztalcenie duzej listy z SPSS w ramke danych.
dane_DF <- dane %>% as.data.frame()
colnames(dane_DF)
# Dotychczas analizowaliśmy jedynie zmienne binarne (0 albo 1).
# Na tych zajęciach przyjrzymy się pytaniom o różnych skalach porównawczych
# np. od 1 do 10.
# Będziemy rozrózniali 2 typy danych - porządkowe, gdzie kolejne wartości są
# lepszą oceną od poprzednich. Do modelowania takich zmiennych posłuży
# Ordinal logit.
# Chcemy sprawdzić ocenę służby zdrowia (stfhlth), w zależnosci od:
#   oceny stanu własnego zdrowia (health), satysfakcji z życia (stflife),
#   płci (gndr), wieku / roku urodzenia (yrbrn)
# Podsumowanie danych
summary(dane_DF$stfhlth)
summary(dane_DF$stflife)
summary(dane_DF$gndr)
summary(dane_DF$yrbrn)
# Wybór zmiennych
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn) %>%
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(stfhlth %in% braki_danych)) %>%
filter(!(health %in% braki_danych)) %>%
filter(!(stflife %in% braki_danych)) %>%
filter(!(gndr %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych))
# Przeksztalcenia
daneModel %<>% mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn))
daneModel$stfhlth %<>% droplevels()
# Prosty model same zmienne ilościowe:
formula <- stfhlth ~ ocena_zadowolenie + yrbrn
model <- polr(formula, data = daneModel, Hess = TRUE)
summary(model)
# Dodajemy factor
formula <- stfhlth ~ ocena_zadowolenie + health + yrbrn + gndr
model <- polr(formula, data = daneModel, Hess = TRUE)
summary(model)
# Problemy z paczką - nie mamy p-value, możliwe jest jego przybliżenie:
ctable <- coef(summary(model))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
p <- round (p, digits = 2)
ctable <- cbind(ctable, "p value" = p)
ctable
daneModel <- dane_DF %>% select(stfhlth, health, stflife, gndr, yrbrn)
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(stfhlth %in% braki_danych)) %>%
filter(!(health %in% braki_danych)) %>%
filter(!(stflife %in% braki_danych)) %>%
filter(!(gndr %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych))
# Przeksztalcenia
daneModel %<>% mutate(ocena_zadowolenie = as.numeric(stflife)) %>%
mutate(yrbrn = as.numeric(yrbrn))
daneModel$stfhlth %<>% droplevels()
# Prosty model same zmienne ilościowe:
formula <- stfhlth ~ ocena_zadowolenie + yrbrn
model <- polr(formula, data = daneModel, Hess = TRUE)
summary(model)
# Dodajemy factor
formula <- stfhlth ~ ocena_zadowolenie + health + yrbrn + gndr
model <- polr(formula, data = daneModel, Hess = TRUE)
summary(model)
# Problemy z paczką - nie mamy p-value, możliwe jest jego przybliżenie:
ctable <- coef(summary(model))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
p <- round (p, digits = 2)
ctable <- cbind(ctable, "p value" = p)
ctable
exp(coef(model))
library("nnet")
summary(dane_DF$prtclgpl)
summary(dane_DF$prtvtdpl)
summary(dane_DF$lrscale)
filePath <- paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/")
fileName <- "ESS8PL.sav"
dane <- read.spss(paste0(filePath, fileName))
# Przeksztalcenie duzej listy z SPSS w ramke danych.
dane_DF <- dane %>% as.data.frame()
colnames(dane_DF)
summary(dane_DF$prtclgpl)
summary(dane_DF$prtvtdpl)
summary(dane_DF$lrscale)
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
daneModel <- dane_DF %>% select(prtclgpl, prtvtdpl, lrscale)
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(prtclgpl %in% braki_danych)) %>%
filter(!(prtvtdpl %in% braki_danych)) %>%
filter(!(lrscale %in% braki_danych))
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
daneModel$prtclgpl <- relevel(daneModel$prtclgpl,
ref = "Prawo i Sprawiedliwosc")
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
daneModel$prtclgpl %<>% droplevels()
daneModel$prtvtdpl %<>% droplevels()
daneModel$lrscale %<>% droplevels()
daneModel$prtclgpl <- relevel(daneModel$prtclgpl,
ref = "Prawo i Sprawiedliwosc")
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
# Wybor zmiennych
daneModel <- dane_DF %>% select(prtclgpl, prtvtdpl, lrscale) %>%
mutate(lrscale = as.numeric(lrscale))
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(prtclgpl %in% braki_danych)) %>%
filter(!(prtvtdpl %in% braki_danych)) %>%
filter(!(lrscale %in% braki_danych))
# Usuwamy niepotrzebne poziomy
daneModel$prtclgpl %<>% droplevels()
daneModel$prtvtdpl %<>% droplevels()
daneModel$lrscale %<>% droplevels()
# Szacujemy model
daneModel$prtclgpl <- relevel(daneModel$prtclgpl,
ref = "Prawo i Sprawiedliwosc")
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
partie <- c("Platforma Obywatelska", "Prawo i Sprawiedliwosc",
"Sojusz Lewicy Demokratycznej")
daneModel %<>% filter(prtclgpl %in% partie)
View(daneModel)
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
# podgląd
summary(dane_DF$prtclgpl)
summary(dane_DF$prtvtdpl)
summary(dane_DF$lrscale)
# Wybor zmiennych
daneModel <- dane_DF %>% select(prtclgpl, yrbrn, lrscale) %>%
mutate(lrscale = as.numeric(lrscale)) %>%
mutate(yrbrn = as.numeric(yrbrn))
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(prtclgpl %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych)) %>%
filter(!(lrscale %in% braki_danych))
# Usuwamy niepotrzebne poziomy
daneModel$prtclgpl %<>% droplevels()
daneModel$yrbrn %<>% droplevels()
daneModel$lrscale %<>% droplevels()
# podgląd
summary(dane_DF$prtclgpl)
summary(dane_DF$prtvtdpl)
summary(dane_DF$lrscale)
# Wybor zmiennych
daneModel <- dane_DF %>% select(prtclgpl, yrbrn, lrscale) %>%
mutate(lrscale = as.numeric(lrscale)) %>%
mutate(yrbrn = as.numeric(yrbrn))
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(prtclgpl %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych)) %>%
filter(!(lrscale %in% braki_danych))
# Usuwamy niepotrzebne poziomy
daneModel$prtclgpl %<>% droplevels()
# Szacujemy model
daneModel$prtclgpl <- relevel(daneModel$prtclgpl,
ref = "Prawo i Sprawiedliwosc")
formula <- prtclgpl ~ prtvtdpl + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
# podgląd
summary(dane_DF$prtclgpl)
summary(dane_DF$yrbrn)
summary(dane_DF$lrscale)
# Wybor zmiennych
daneModel <- dane_DF %>% select(prtclgpl, yrbrn, lrscale) %>%
mutate(lrscale = as.numeric(lrscale)) %>%
mutate(yrbrn = as.numeric(yrbrn))
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer")
daneModel %<>% filter(!(prtclgpl %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych)) %>%
filter(!(lrscale %in% braki_danych))
# Usuwamy niepotrzebne poziomy
daneModel$prtclgpl %<>% droplevels()
# Szacujemy model
daneModel$prtclgpl <- relevel(daneModel$prtclgpl,
ref = "Prawo i Sprawiedliwosc")
formula <- prtclgpl ~ yrbrn + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
# podgląd
summary(dane_DF$prtclgpl)
summary(dane_DF$yrbrn)
summary(dane_DF$lrscale)
# Wybor zmiennych
daneModel <- dane_DF %>% select(prtclgpl, yrbrn, lrscale) %>%
mutate(lrscale = as.numeric(lrscale)) %>%
mutate(yrbrn = as.numeric(yrbrn))
# Filtrujemy braki danych
braki_danych <- c("Refusal", "Don't know", "No answer",
"Other", "Not applicable")
daneModel %<>% filter(!(prtclgpl %in% braki_danych)) %>%
filter(!(yrbrn %in% braki_danych)) %>%
filter(!(lrscale %in% braki_danych))
# Usuwamy niepotrzebne poziomy
daneModel$prtclgpl %<>% droplevels()
# Szacujemy model
daneModel$prtclgpl <- relevel(daneModel$prtclgpl,
ref = "Prawo i Sprawiedliwosc")
formula <- prtclgpl ~ yrbrn + lrscale
model <- multinom(formula, data = daneModel)
summary(model)
